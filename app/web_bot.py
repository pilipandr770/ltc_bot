# web_bot.py - –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Ç-–±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏ –ø–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é MA7/MA25
# MA7 > MA25 = –¥–µ—Ä–∂–∏–º –∫–æ–∏–Ω, MA7 < MA25 = –¥–µ—Ä–∂–∏–º USDT
import os
import json
import time
import math
import threading
from datetime import datetime, timezone
from typing import Tuple, Optional, Dict, Any
from flask import Flask, jsonify
from dotenv import load_dotenv
from binance.client import Client
from binance.enums import *
from binance.exceptions import BinanceAPIException, BinanceOrderException

# ========== –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤ ==========
class AssetSwitcher:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏ –ø–æ MA —Å–∏–≥–Ω–∞–ª–∞–º"""
    
    def __init__(self, client: Optional[Client], symbol: str):
        self.client = client
        self.symbol = symbol
        self.base_asset = symbol[:-4] if symbol.endswith("USDT") else symbol.split("USDT")[0]
        self.quote_asset = "USDT"
        self.last_switch_time = 0
        self.min_switch_interval = 10  # –º–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏
    
    def should_hold_base(self, ma_short: float, ma_long: float) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–æ–ª–∂–Ω—ã –ª–∏ –º—ã –¥–µ—Ä–∂–∞—Ç—å –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ (–∫–æ–∏–Ω)"""
        return ma_short > ma_long
    
    def get_current_asset_preference(self, usdt_balance: float, base_balance: float, current_price: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –º—ã —Å–µ–π—á–∞—Å –¥–µ—Ä–∂–∏–º"""
        usdt_value = usdt_balance
        base_value = base_balance * current_price
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        log(f"üîç –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ê–ö–¢–ò–í–ê: USDT=${usdt_value:.2f}, {self.base_asset}=${base_value:.2f}", "DEBUG")
        
        # –°—á–∏—Ç–∞–µ–º —á—Ç–æ –¥–µ—Ä–∂–∏–º —Ç–æ—Ç –∞–∫—Ç–∏–≤, –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ–ª—å—à–µ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if base_value > usdt_value and base_value > 1.0:  # –º–∏–Ω–∏–º—É–º $1
            log(f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢: –î–µ—Ä–∂–∏–º {self.base_asset} (${base_value:.2f} > ${usdt_value:.2f})", "DEBUG")
            return self.base_asset
        else:
            log(f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢: –î–µ—Ä–∂–∏–º {self.quote_asset} (${usdt_value:.2f} >= ${base_value:.2f})", "DEBUG")
            return self.quote_asset
    
    def need_to_switch(self, current_asset: str, should_hold: str) -> bool:
        """–ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –∞–∫—Ç–∏–≤"""
        current_time = time.time()
        time_since_last = current_time - self.last_switch_time
        
        log(f"üîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø: current='{current_asset}', should='{should_hold}', time_since_last={time_since_last:.1f}s", "DEBUG")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if time_since_last < self.min_switch_interval:
            log(f"üîç –ö–£–õ–î–ê–£–ù –ê–ö–¢–ò–í–ï–ù: {time_since_last:.1f}s < {self.min_switch_interval}s", "DEBUG")
            return False
        
        assets_different = current_asset != should_hold
        log(f"üîç –ê–ö–¢–ò–í–´ –†–ê–ó–ù–´–ï: {assets_different}", "DEBUG")
        
        return assets_different
    
    def execute_switch(self, from_asset: str, to_asset: str, balance: float, current_price: float, step: float) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞"""
        try:
            if from_asset == self.base_asset and to_asset == self.quote_asset:
                # –ü—Ä–æ–¥–∞–µ–º –∫–æ–∏–Ω –∑–∞ USDT
                return self._sell_base_for_usdt(balance, step)
            elif from_asset == self.quote_asset and to_asset == self.base_asset:
                # –ü–æ–∫—É–ø–∞–µ–º –∫–æ–∏–Ω –∑–∞ USDT
                return self._buy_base_with_usdt(balance, current_price, step)
            return False
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è {from_asset} -> {to_asset}: {e}", "ERROR")
            return False
    
    def _sell_base_for_usdt(self, base_qty: float, step: float) -> bool:
        """–ü—Ä–æ–¥–∞—Ç—å –≤–µ—Å—å –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ –∑–∞ USDT"""
        if TEST_MODE:
            log(f"üß™ TEST SELL: {base_qty:.6f} {self.base_asset} -> USDT", "TEST")
            self.last_switch_time = time.time()
            return True
        
        if not self.client:
            log(f"‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API", "ERROR")
            return False
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏
        qty = round_step(base_qty * 0.999, step)  # 99.9% –¥–ª—è —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
        
        log(f"üî¢ –†–ê–°–ß–ï–¢ –ü–†–û–î–ê–ñ–ò: –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={base_qty:.6f}, –ü–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è={qty:.6f} (step={step})", "CALC")
        
        if qty <= 0:
            log(f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ: {qty:.6f}", "WARN")
            return False
        
        try:
            log(f"üì§ –û–¢–ü–†–ê–í–ö–ê –û–†–î–ï–†–ê –ù–ê –ü–†–û–î–ê–ñ–£: {qty:.6f} {self.base_asset}", "ORDER")
            order = self.client.order_market_sell(symbol=self.symbol, quantity=qty)
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ
            if 'fills' in order and order['fills']:
                total_usdt = sum(float(fill['price']) * float(fill['qty']) for fill in order['fills'])
                avg_price = total_usdt / float(order['executedQty']) if float(order['executedQty']) > 0 else 0
                log(f"‚úÖ –ü–†–û–î–ê–ñ–ê –í–´–ü–û–õ–ù–ï–ù–ê: {order['executedQty']} {self.base_asset} –∑–∞ {total_usdt:.2f} USDT (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.4f})", "TRADE")
            else:
                log(f"‚úÖ –ü–†–û–î–ê–ñ–ê –í–´–ü–û–õ–ù–ï–ù–ê: {qty:.6f} {self.base_asset} -> USDT", "TRADE")
            
            self.last_switch_time = time.time()
            return True
        except Exception as e:
            log(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–û–î–ê–ñ–ò: {e}", "ERROR")
            return False
    
    def _buy_base_with_usdt(self, usdt_amount: float, current_price: float, step: float) -> bool:
        """–ö—É–ø–∏—Ç—å –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ –∑–∞ –≤–µ—Å—å USDT"""
        if TEST_MODE:
            qty = usdt_amount / current_price
            log(f"üß™ TEST BUY: {usdt_amount:.2f} USDT -> {qty:.6f} {self.base_asset}", "TEST")
            self.last_switch_time = time.time()
            return True
        
        if not self.client:
            log(f"‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API", "ERROR")
            return False
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
        usdt_to_spend = usdt_amount * 0.999  # 99.9% –¥–ª—è —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
        qty = round_step(usdt_to_spend / current_price, step)
        
        log(f"üî¢ –†–ê–°–ß–ï–¢ –ü–û–ö–£–ü–ö–ò: USDT={usdt_amount:.2f}, –ö —Ç—Ä–∞—Ç–µ={usdt_to_spend:.2f}, –¶–µ–Ω–∞={current_price:.4f}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ={qty:.6f} (step={step})", "CALC")
        
        if qty <= 0 or usdt_to_spend < 10:  # –º–∏–Ω–∏–º—É–º $10
            log(f"‚ùå –°—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞: {usdt_to_spend:.2f} USDT (–º–∏–Ω–∏–º—É–º $10)", "WARN")
            return False
        
        try:
            log(f"üì§ –û–¢–ü–†–ê–í–ö–ê –û–†–î–ï–†–ê –ù–ê –ü–û–ö–£–ü–ö–£: {qty:.6f} {self.base_asset} –∑–∞ {usdt_to_spend:.2f} USDT", "ORDER")
            order = self.client.order_market_buy(symbol=self.symbol, quantity=qty)
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ
            if 'fills' in order and order['fills']:
                total_cost = sum(float(fill['price']) * float(fill['qty']) for fill in order['fills'])
                avg_price = total_cost / float(order['executedQty']) if float(order['executedQty']) > 0 else 0
                log(f"‚úÖ –ü–û–ö–£–ü–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê: {order['executedQty']} {self.base_asset} –∑–∞ {total_cost:.2f} USDT (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.4f})", "TRADE")
            else:
                log(f"‚úÖ –ü–û–ö–£–ü–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê: {usdt_to_spend:.2f} USDT -> {qty:.6f} {self.base_asset}", "TRADE")
            
            self.last_switch_time = time.time()
            return True
        except Exception as e:
            log(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–ö–£–ü–ö–ò: {e}", "ERROR")
            return False

# ========== –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==========
load_dotenv()
API_KEY = os.getenv("BINANCE_API_KEY", "").strip() or None
API_SECRET = os.getenv("BINANCE_API_SECRET", "").strip() or None
SYMBOL = os.getenv("SYMBOL", "BNBUSDT").upper()
INTERVAL = os.getenv("INTERVAL", "5m")  # 1m,3m,5m,15m,1h,...
MA_SHORT = int(os.getenv("MA_SHORT", "7"))
MA_LONG = int(os.getenv("MA_LONG", "25"))

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TEST_MODE = os.getenv("TEST_MODE", "true").lower() == "true"
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "20"))   # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
STATE_PATH = os.getenv("STATE_PATH", "state.json")

# –§–∏–ª—å—Ç—Ä —à—É–º–∞ –¥–ª—è –∫—Ä–æ—Å–∞ (–º–∏–Ω. —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É MA –≤ % –æ—Ç —Ü–µ–Ω—ã)
MA_SPREAD_BPS = float(os.getenv("MA_SPREAD_BPS", "2.0"))  # 2 –±.–ø. = 0.02% –¥–ª—è –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
MAX_RETRIES = int(os.getenv("MAX_RETRIES", "3"))
HEALTH_CHECK_INTERVAL = int(os.getenv("HEALTH_CHECK_INTERVAL", "300"))
MIN_BALANCE_USDT = float(os.getenv("MIN_BALANCE_USDT", "10.0"))

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
client: Optional[Client] = None
asset_switcher: Optional[AssetSwitcher] = None
running = False
last_action_ts = 0
last_health_check = 0
error_count = 0

bot_status = {
    "status": "idle", 
    "symbol": SYMBOL, 
    "current_asset": "USDT",  # –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –¥–µ—Ä–∂–∏–º —Å–µ–π—á–∞—Å
    "should_hold": "USDT",    # –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –¥–æ–ª–∂–Ω—ã –¥–µ—Ä–∂–∞—Ç—å –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    "test_mode": TEST_MODE,
    "last_update": None,
    "balance_usdt": 0.0,
    "balance_base": 0.0,
    "current_price": 0.0,
    "ma_short": 0.0,
    "ma_long": 0.0,
    "error_count": 0,
    "uptime": 0,
    "last_switch": None,
    "switches_count": 0
}

# ========== –£—Ç–∏–ª–∏—Ç—ã –ª–æ–≥–æ–≤ ==========
def log(msg: str, level: str = "INFO"):
    ts = datetime.now(timezone.utc).astimezone().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{ts}] [{level}] {msg}", flush=True)

# ========== –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ==========
def load_state():
    global bot_status
    if os.path.exists(STATE_PATH):
        try:
            with open(STATE_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)
                bot_status.update(data)
                log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ state.json", "STATE")
        except Exception as e:
            log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}", "WARN")

def save_state():
    try:
        bot_status["last_update"] = datetime.now(timezone.utc).isoformat()
        with open(STATE_PATH, "w", encoding="utf-8") as f:
            json.dump(bot_status, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}", "WARN")

# ========== Binance –∫–ª–∏–µ–Ω—Ç ==========
def init_client():
    global client, asset_switcher
    if API_KEY and API_SECRET:
        try:
            client = Client(API_KEY, API_SECRET)
            # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
            server_time = client.get_server_time()
            local_time = int(time.time() * 1000)
            offset = server_time["serverTime"] - local_time
            if abs(offset) > 1000:
                client.timestamp_offset = offset
                log(f"–í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, offset={offset}–º—Å", "TIME")
            
            client.ping()
            asset_switcher = AssetSwitcher(client, SYMBOL)
            
            log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
            bot_status["status"] = "connected"
            return True
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}", "ERROR")
            client = None
            asset_switcher = None
            bot_status["status"] = "connection_error"
            return False
    else:
        log("API –∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî TEST_MODE –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ true", "WARN")
        asset_switcher = AssetSwitcher(None, SYMBOL)
        bot_status["status"] = "no_api_keys"
        return False

# ========== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–∏–º–≤–æ–ª—É –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ ==========
def get_symbol_filters(symbol: str):
    if not client:
        return 0.001, 0.01, 0.001, 10.0
    
    try:
        info = client.get_symbol_info(symbol)
        if not info:
            raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª {symbol}")
        
        lot = next(f for f in info["filters"] if f["filterType"] == "LOT_SIZE")
        pricef = next(f for f in info["filters"] if f["filterType"] == "PRICE_FILTER")
        min_notional = next((f for f in info["filters"] if f["filterType"] == "MIN_NOTIONAL"), None)
        
        step = float(lot["stepSize"])
        tick = float(pricef["tickSize"])
        min_qty = float(lot["minQty"])
        min_not = float(min_notional["minNotional"]) if min_notional else 10.0
        
        return step, tick, min_qty, min_not
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∏–º–≤–æ–ª–∞: {e}", "ERROR")
        return 0.001, 0.01, 0.001, 10.0

def round_step(qty: float, step: float) -> float:
    return math.floor(qty / step) * step

def round_tick(price: float, tick: float) -> float:
    return round(math.floor(price / tick) * tick, 8)

def retry_on_error(func, max_retries=MAX_RETRIES, delay=1):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    for attempt in range(max_retries):
        try:
            return func()
        except (BinanceAPIException, BinanceOrderException) as e:
            if "Too many requests" in str(e) or "Request rate limit" in str(e):
                wait_time = delay * (2 ** attempt)
                log(f"Rate limit, –∂–¥–µ–º {wait_time}—Å (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})", "WARN")
                time.sleep(wait_time)
            else:
                log(f"Binance –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}", "ERROR")
                if attempt < max_retries - 1:
                    time.sleep(delay)
        except Exception as e:
            log(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}", "ERROR")
            if attempt < max_retries - 1:
                time.sleep(delay)
    
    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")

# ========== –î–∞–Ω–Ω—ã–µ –∏ MA ==========
BINANCE_INTERVALS = {
    "1m": Client.KLINE_INTERVAL_1MINUTE,
    "3m": Client.KLINE_INTERVAL_3MINUTE,
    "5m": Client.KLINE_INTERVAL_5MINUTE,
    "15m": Client.KLINE_INTERVAL_15MINUTE,
    "1h": Client.KLINE_INTERVAL_1HOUR,
    "4h": Client.KLINE_INTERVAL_4HOUR,
}

def get_closes(symbol: str, interval: str, limit: int = 200):
    if not client:
        import random
        base_price = 600.0 if symbol == "BNBUSDT" else 100.0
        return [base_price + random.uniform(-5, 5) for _ in range(limit)]
    
    def _get_klines():
        inter = BINANCE_INTERVALS.get(interval, Client.KLINE_INTERVAL_5MINUTE)
        klines = client.get_klines(symbol=symbol, interval=inter, limit=limit)
        return [float(k[4]) for k in klines]
    
    return retry_on_error(_get_klines)

def ma(arr, period):
    if len(arr) < period:
        return None
    return sum(arr[-period:]) / period

# ========== –ë–∞–ª–∞–Ω—Å—ã ==========
def get_balances() -> Tuple[float, float]:
    if not client:
        return 1000.0, 0.0
    
    def _get_balances():
        base = SYMBOL[:-4] if SYMBOL.endswith("USDT") else SYMBOL.split("USDT")[0]
        usdt = float(client.get_asset_balance("USDT")["free"])
        base_bal = float(client.get_asset_balance(base)["free"])
        return usdt, base_bal
    
    return retry_on_error(_get_balances)

# ========== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã ==========
def health_check():
    global last_health_check, error_count
    current_time = time.time()
    
    if current_time - last_health_check > HEALTH_CHECK_INTERVAL:
        try:
            if client:
                client.ping()
                usdt_bal, base_bal = get_balances()
                bot_status.update({
                    "balance_usdt": usdt_bal,
                    "balance_base": base_bal,
                    "error_count": error_count
                })
                
                if error_count > 0:
                    error_count = max(0, error_count - 1)
                    
            last_health_check = current_time
            log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω–∞", "HEALTH")
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}", "ERROR")
            error_count += 1

# ========== –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª ==========
def trading_loop():
    global running, last_action_ts, bot_status, error_count
    
    start_time = time.time()
    log(f"–°—Ç–∞—Ä—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è {SYMBOL} (TEST_MODE={TEST_MODE})", "START")
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ running = True
    if not running:
        log("‚ö†Ô∏è running=False, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ True", "WARN")
        running = True
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å–∏–º–≤–æ–ª–∞
    step, tick, min_qty, min_notional = get_symbol_filters(SYMBOL)
    load_state()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º asset_switcher –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    global asset_switcher
    if asset_switcher is None:
        log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AssetSwitcher...", "INIT")
        asset_switcher = AssetSwitcher(client, SYMBOL)
    
    cycle_count = 0
    log(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ (running={running})", "LOOP")
    
    while running:
        try:
            cycle_count += 1
            log(f"üîÑ –¶–ò–ö–õ #{cycle_count} ==========================================", "CYCLE")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            bot_status["uptime"] = int(time.time() - start_time)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
            health_check()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            log("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...", "DATA")
            prices = get_closes(SYMBOL, INTERVAL, limit=max(MA_LONG * 3, 100))
            price = prices[-1]
            usdt_bal, base_bal = get_balances()
            
            # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –±–∞–ª–∞–Ω—Å–æ–≤
            base_value = base_bal * price
            total_value = usdt_bal + base_value
            log(f"üí∞ –ë–ê–õ–ê–ù–°–´: USDT={usdt_bal:.2f} | {asset_switcher.base_asset}={base_bal:.6f} (${base_value:.2f}) | –í–°–ï–ì–û=${total_value:.2f}", "BALANCE")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            bot_status.update({
                "current_price": price,
                "balance_usdt": usdt_bal,
                "balance_base": base_bal
            })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if total_value < MIN_BALANCE_USDT:
                log(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: ${total_value:.2f} < ${MIN_BALANCE_USDT}", "WARN")
                time.sleep(CHECK_INTERVAL)
                continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MA
            m1 = ma(prices, MA_SHORT)
            m2 = ma(prices, MA_LONG)
            
            if m1 is not None and m2 is not None:
                # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ MA
                ma_diff = m1 - m2
                ma_diff_pct = (ma_diff / price) * 100
                spread_bps = abs(ma_diff / price) * 10000.0
                
                log(f"üìà MA –ê–ù–ê–õ–ò–ó: MA7={m1:.4f} | MA25={m2:.4f} | –†–∞–∑–Ω–∏—Ü–∞={ma_diff:+.4f} ({ma_diff_pct:+.3f}%) | –°–ø—Ä–µ–¥={spread_bps:.1f}–±.–ø.", "MA")
                
                bot_status.update({
                    "ma_short": m1,
                    "ma_long": m2
                })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ asset_switcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if asset_switcher is None:
                    log("‚ùå AssetSwitcher –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "ERROR")
                    time.sleep(CHECK_INTERVAL)
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –¥–æ–ª–∂–Ω—ã –¥–µ—Ä–∂–∞—Ç—å
                should_hold_base = asset_switcher.should_hold_base(m1, m2)
                should_hold_asset = asset_switcher.base_asset if should_hold_base else asset_switcher.quote_asset
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –¥–µ—Ä–∂–∏–º —Å–µ–π—á–∞—Å
                current_asset = asset_switcher.get_current_asset_preference(usdt_bal, base_bal, price)
                
                # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                trend_direction = "–í–û–°–•–û–î–Ø–©–ò–ô üìà" if m1 > m2 else "–ù–ò–°–•–û–î–Ø–©–ò–ô üìâ"
                strategy_reason = f"MA7 {'>' if m1 > m2 else '<'} MA25"
                log(f"üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø: {trend_direction} ({strategy_reason}) ‚Üí –î–æ–ª–∂–Ω—ã –¥–µ—Ä–∂–∞—Ç—å {should_hold_asset}", "STRATEGY")
                log(f"üè¶ –¢–ï–ö–£–©–ò–ô –ê–ö–¢–ò–í: {current_asset} (–ø–æ –±–∞–ª–∞–Ω—Å–∞–º: USDT=${usdt_bal:.2f}, {asset_switcher.base_asset}=${base_value:.2f})", "CURRENT")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                bot_status.update({
                    "current_asset": current_asset,
                    "should_hold": should_hold_asset
                })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä —à—É–º–∞
                if spread_bps < MA_SPREAD_BPS:
                    log(f"üîá –§–ò–õ–¨–¢–† –®–£–ú–ê: –°–ø—Ä–µ–¥ {spread_bps:.1f}–±.–ø. < {MA_SPREAD_BPS}–±.–ø. - —Å–∏–≥–Ω–∞–ª —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π", "FILTER")
                    time.sleep(CHECK_INTERVAL)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
                time_since_last_switch = time.time() - asset_switcher.last_switch_time
                if time_since_last_switch < asset_switcher.min_switch_interval:
                    remaining_cooldown = asset_switcher.min_switch_interval - time_since_last_switch
                    log(f"‚è∞ –ö–£–õ–î–ê–£–ù: –û—Å—Ç–∞–ª–æ—Å—å {remaining_cooldown:.1f}—Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è", "COOLDOWN")
                    time.sleep(CHECK_INTERVAL)
                    continue
                
                # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                status_emoji = "‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–û" if current_asset == should_hold_asset else "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï"
                log(f"üìä –°–¢–ê–¢–£–°: –¶–µ–Ω–∞={price:.4f} | –î–µ—Ä–∂–∏–º={current_asset} | –ù—É–∂–Ω–æ={should_hold_asset} | {status_emoji}", "STATUS")
                
                # –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                log(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: current_asset='{current_asset}', should_hold_asset='{should_hold_asset}'", "DEBUG")
                log(f"üîç –ë–ê–õ–ê–ù–°–´: USDT={usdt_bal:.2f}, {asset_switcher.base_asset}={base_bal:.6f} (${base_value:.2f})", "DEBUG")
                log(f"üîç –ö–£–õ–î–ê–£–ù: –ü—Ä–æ—à–ª–æ {time_since_last_switch:.1f}—Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (–º–∏–Ω: {asset_switcher.min_switch_interval}—Å–µ–∫)", "DEBUG")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –∞–∫—Ç–∏–≤
                need_switch = asset_switcher.need_to_switch(current_asset, should_hold_asset)
                log(f"üîç –†–ï–®–ï–ù–ò–ï: need_to_switch = {need_switch}", "DEBUG")
                
                if need_switch:
                    log(f"üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¢–†–ï–ë–£–ï–¢–°–Ø: {current_asset} ‚Üí {should_hold_asset}", "SWITCH")
                    
                    # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
                    if current_asset == asset_switcher.base_asset:
                        # –ü—Ä–æ–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤
                        log(f"üìâ –ü–†–û–î–ê–ñ–ê: {base_bal:.6f} {asset_switcher.base_asset} ‚Üí USDT –ø–æ —Ü–µ–Ω–µ {price:.4f}", "TRADE_PLAN")
                        expected_usdt = base_bal * price * 0.999  # —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
                        log(f"üíµ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ~{expected_usdt:.2f} USDT (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ 0.1%)", "TRADE_PLAN")
                        
                        success = asset_switcher.execute_switch(
                            current_asset, should_hold_asset, base_bal, price, step
                        )
                    else:
                        # –ü–æ–∫—É–ø–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤
                        log(f"üìà –ü–û–ö–£–ü–ö–ê: {usdt_bal:.2f} USDT ‚Üí {asset_switcher.base_asset} –ø–æ —Ü–µ–Ω–µ {price:.4f}", "TRADE_PLAN")
                        expected_qty = (usdt_bal * 0.999) / price  # —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
                        log(f"ü™ô –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ~{expected_qty:.6f} {asset_switcher.base_asset} (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ 0.1%)", "TRADE_PLAN")
                        
                        success = asset_switcher.execute_switch(
                            current_asset, should_hold_asset, usdt_bal, price, step
                        )
                    
                    if success:
                        bot_status["switches_count"] = bot_status.get("switches_count", 0) + 1
                        bot_status["last_switch"] = datetime.now(timezone.utc).isoformat()
                        last_action_ts = time.time()
                        log(f"‚úÖ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–û –£–°–ü–ï–®–ù–û! –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {bot_status['switches_count']}", "SUCCESS")
                        
                        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ
                        time.sleep(2)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                        new_usdt_bal, new_base_bal = get_balances()
                        new_base_value = new_base_bal * price
                        new_total = new_usdt_bal + new_base_value
                        log(f"üí∞ –ù–û–í–´–ï –ë–ê–õ–ê–ù–°–´: USDT={new_usdt_bal:.2f} | {asset_switcher.base_asset}={new_base_bal:.6f} (${new_base_value:.2f}) | –í–°–ï–ì–û=${new_total:.2f}", "RESULT")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –Ω–æ–≤—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏
                        bot_status.update({
                            "balance_usdt": new_usdt_bal,
                            "balance_base": new_base_bal
                        })
                    else:
                        log(f"‚ùå –û–®–ò–ë–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø!", "ERROR")
                        error_count += 1
                else:
                    log(f"‚úÖ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø - –∞–∫—Ç–∏–≤—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", "OK")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            bot_status["status"] = "running"
            save_state()
            
            log(f"üò¥ –û–ñ–ò–î–ê–ù–ò–ï {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...", "SLEEP")
            time.sleep(CHECK_INTERVAL)
            
        except (BinanceAPIException, BinanceOrderException) as e:
            emsg = str(e)
            if "Too many requests" in emsg or "Request rate limit" in emsg:
                log(f"Rate limit: {e} ‚Äî —Å–ø–ª—é 5 —Å–µ–∫", "WARN")
                time.sleep(5)
            else:
                log(f"Binance –æ—à–∏–±–∫–∞: {e}", "ERROR")
                error_count += 1
                time.sleep(2)
        except Exception as e:
            log(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
            error_count += 1
            bot_status["status"] = f"error: {str(e)}"
            save_state()
            time.sleep(2)
    
    log("–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "SHUTDOWN")

# ========== Flask –º–∞—Ä—à—Ä—É—Ç—ã ==========
@app.route("/")
def root():
    return jsonify({
        "ok": True, 
        "symbol": SYMBOL, 
        "status": bot_status.get("status", "idle"), 
        "current_asset": bot_status.get("current_asset", "USDT"),
        "should_hold": bot_status.get("should_hold", "USDT"),
        "test_mode": TEST_MODE,
        "uptime": bot_status.get("uptime", 0)
    })

@app.route("/health")
def health():
    try:
        if client:
            client.ping()
            return jsonify({"ok": True, "status": "healthy"})
        else:
            return jsonify({"ok": True, "status": "test_mode"})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500

@app.route("/start")
def start():
    global running, bot_status
    if running:
        return jsonify({"ok": True, "message": "—É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"})
    
    if API_KEY and API_SECRET:
        init_client()
    
    running = True
    bot_status["status"] = "running"
    save_state()
    
    t = threading.Thread(target=trading_loop, daemon=True)
    t.start()
    log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", "START")
    return jsonify({"ok": True, "mode": "TEST" if TEST_MODE else "LIVE"})

@app.route("/stop")
def stop():
    global running, bot_status
    running = False
    bot_status["status"] = "stopped"
    save_state()
    log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "STOP")
    return jsonify({"ok": True})

@app.route("/status")
def status():
    return jsonify({
        "ok": True,
        "symbol": SYMBOL,
        "mode": "TEST" if TEST_MODE else "LIVE",
        "status": bot_status.get("status", "idle"),
        "current_asset": bot_status.get("current_asset", "USDT"),
        "should_hold": bot_status.get("should_hold", "USDT"),
        "current_price": bot_status.get("current_price", 0.0),
        "balance_usdt": bot_status.get("balance_usdt", 0.0),
        "balance_base": bot_status.get("balance_base", 0.0),
        "ma_short": bot_status.get("ma_short", 0.0),
        "ma_long": bot_status.get("ma_long", 0.0),
        "error_count": bot_status.get("error_count", 0),
        "uptime": bot_status.get("uptime", 0),
        "switches_count": bot_status.get("switches_count", 0),
        "last_switch": bot_status.get("last_switch"),
        "last_update": bot_status.get("last_update")
    })

@app.route("/config")
def config():
    return jsonify({
        "symbol": SYMBOL,
        "interval": INTERVAL,
        "ma_short": MA_SHORT,
        "ma_long": MA_LONG,
        "test_mode": TEST_MODE,
        "check_interval": CHECK_INTERVAL,
        "ma_spread_bps": MA_SPREAD_BPS,
        "min_balance_usdt": MIN_BALANCE_USDT
    })

# ========== –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –¥–ª—è –¥–µ–ø–ª–æ—è ==========
if API_KEY and API_SECRET:
    try:
        if not running:
            init_client()
            running = True
            bot_thread = threading.Thread(target=trading_loop, daemon=True)
            bot_thread.start()
            mode = "TEST" if TEST_MODE else "LIVE"
            log(f"üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ä–µ–∂–∏–º–µ {mode}", "STARTUP")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}", "ERROR")
        running = False
else:
    log("‚ö†Ô∏è –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω: –Ω–µ—Ç API –∫–ª—é—á–µ–π", "WARNING")

# ========== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ==========
if __name__ == "__main__":
    if API_KEY and API_SECRET:
        init_client()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        if not running:
            running = True
            bot_thread = threading.Thread(target=trading_loop, daemon=True)
            bot_thread.start()
            mode = "TEST" if TEST_MODE else "LIVE"
            log(f"üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ {mode}", "STARTUP")
    
    port = int(os.getenv("PORT", "5000"))
    app.run(host="0.0.0.0", port=port)
    