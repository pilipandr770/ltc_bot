# web_bot.py - –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Ç-–±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏ –ø–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é MA7/MA25
# MA7 > MA25 = –¥–µ—Ä–∂–∏–º –∫–æ–∏–Ω, MA7 < MA25 = –¥–µ—Ä–∂–∏–º USDT
import os
import json
import time
import math
import threading
from datetime import datetime, timezone
from typing import Tuple, Optional, Dict, Any
from flask import Flask, jsonify
from dotenv import load_dotenv
from binance.client import Client
from binance.enums import *
from binance.exceptions import BinanceAPIException, BinanceOrderException

# ========== –£—Ç–∏–ª–∏—Ç—ã –ª–æ–≥–æ–≤ ==========
def log(msg: str, level: str = "INFO"):
    ts = datetime.now(timezone.utc).astimezone().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{ts}] [{level}] {msg}", flush=True)

# ========== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π ==========
from dataclasses import dataclass
from typing import List

@dataclass
class ConfigurationStatus:
    test_mode: bool
    api_keys_present: bool
    api_keys_valid: bool
    environment_source: str  # "system", "file", "default"
    configuration_issues: List[str]
    safety_checks_passed: bool

@dataclass
class TradingModeStatus:
    current_mode: str  # "TEST" or "LIVE"
    mode_source: str   # –æ—Ç–∫—É–¥–∞ –≤–∑—è—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    can_switch_to_live: bool
    blocking_issues: List[str]
    last_mode_change: Optional[datetime]

class EnvironmentConfig:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.config_status = None
        self.load_environment()
        self.validate_configuration()
    
    def load_environment(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        log("üöÄ –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò", "CONFIG")
        log("=" * 60, "CONFIG")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        current_dir = os.path.dirname(os.path.abspath(__file__))
        env_file_path = os.path.join(current_dir, '.env')
        
        log(f"üîç –ü–æ–∏—Å–∫ .env —Ñ–∞–π–ª–∞: {env_file_path}", "CONFIG")
        if os.path.exists(env_file_path):
            log("‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º...", "CONFIG")
            load_dotenv(env_file_path)
        else:
            log("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", "CONFIG")
            load_dotenv()  # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.api_key = self._get_env_with_logging("BINANCE_API_KEY", "").strip() or None
        self.api_secret = self._get_env_with_logging("BINANCE_API_SECRET", "").strip() or None
        self.symbol = self._get_env_with_logging("SYMBOL", "BNBUSDT", str.upper)
        self.interval = self._get_env_with_logging("INTERVAL", "30m")
        self.ma_short = self._get_env_with_logging("MA_SHORT", "7", int)
        self.ma_long = self._get_env_with_logging("MA_LONG", "25", int)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TEST_MODE
        # –í–ê–ñ–ù–û: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        # –í –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TEST_MODE=false
        test_mode_str = self._get_env_with_logging("TEST_MODE", "true")
        self.test_mode = test_mode_str.lower() == "true"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è TEST_MODE
        log("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TEST_MODE:", "CONFIG")
        log(f"   –°—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{test_mode_str}'", "CONFIG")
        log(f"   –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.test_mode}", "CONFIG")
        log(f"   –û–∂–∏–¥–∞–µ–º–æ–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: TEST_MODE=false", "CONFIG")
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.check_interval = self._get_env_with_logging("CHECK_INTERVAL", "60", int)
        self.state_path = self._get_env_with_logging("STATE_PATH", "state.json")
        self.ma_spread_bps = self._get_env_with_logging("MA_SPREAD_BPS", "2.0", float)
        self.max_retries = self._get_env_with_logging("MAX_RETRIES", "3", int)
        self.health_check_interval = self._get_env_with_logging("HEALTH_CHECK_INTERVAL", "300", int)
        self.min_balance_usdt = self._get_env_with_logging("MIN_BALANCE_USDT", "10.0", float)
        
        log("‚úÖ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ó–ê–ì–†–£–ñ–ï–ù–ê –£–°–ü–ï–®–ù–û", "CONFIG")
        log("=" * 60, "CONFIG")
    
    def _get_env_with_logging(self, name: str, default: str, convert_func=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        system_value = os.environ.get(name)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ os.getenv (—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ load_dotenv)
        dotenv_value = os.getenv(name)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if system_value is not None:
            final_value = system_value
            source = "—Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        elif dotenv_value is not None:
            final_value = dotenv_value
            source = ".env —Ñ–∞–π–ª"
        else:
            final_value = default
            source = "–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if convert_func:
            try:
                converted_value = convert_func(final_value)
                self._log_env_var(name, converted_value, convert_func(default) if default else None, source)
                return converted_value
            except (ValueError, TypeError) as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {name}={final_value}: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", "ERROR")
                converted_default = convert_func(default) if default else None
                self._log_env_var(name, converted_default, converted_default, "–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)")
                return converted_default
        else:
            self._log_env_var(name, final_value, default, source)
            return final_value
    
    def _log_env_var(self, name: str, value: Any, default: Any, source: str = "unknown") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º"""
        if value == default:
            log(f"üîß ENV {name}={value} (–∏—Å—Ç–æ—á–Ω–∏–∫: –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", "CONFIG")
        else:
            log(f"üîß ENV {name}={value} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})", "CONFIG")
    
    def validate_configuration(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        api_keys_present = bool(self.api_key and self.api_secret)
        if not api_keys_present:
            issues.append("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
        log("=" * 60, "CONFIG")
        if self.test_mode:
            log("üß™ –†–ï–ñ–ò–ú –¢–û–†–ì–û–í–õ–ò: –¢–ï–°–¢–û–í–´–ô (TEST_MODE=true)", "CONFIG")
            log("‚ö†Ô∏è  –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã", "CONFIG")
        else:
            log("üî¥ –†–ï–ñ–ò–ú –¢–û–†–ì–û–í–õ–ò: –†–ï–ê–õ–¨–ù–´–ô (TEST_MODE=false)", "CONFIG")
            log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –†–ï–ê–õ–¨–ù–´–ï —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏!", "CONFIG")
            log("üí∞ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "CONFIG")
            if not api_keys_present:
                log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞!", "ERROR")
                issues.append("–†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏")
        log("=" * 60, "CONFIG")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config_status = ConfigurationStatus(
            test_mode=self.test_mode,
            api_keys_present=api_keys_present,
            api_keys_valid=False,  # –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–∑–∂–µ
            environment_source="mixed",  # –°–º–µ—à–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            configuration_issues=issues,
            safety_checks_passed=len(issues) == 0
        )
    
    def get_trading_mode(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        return self.test_mode
    
    def log_configuration_status(self):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if self.config_status:
            log("üìä –°–¢–ê–¢–£–° –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:", "CONFIG")
            log(f"   –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏: {'–¢–ï–°–¢–û–í–´–ô' if self.config_status.test_mode else '–†–ï–ê–õ–¨–ù–´–ô'}", "CONFIG")
            log(f"   API –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {'‚úÖ' if self.config_status.api_keys_present else '‚ùå'}", "CONFIG")
            log(f"   –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {'‚úÖ' if self.config_status.safety_checks_passed else '‚ùå'}", "CONFIG")
            if self.config_status.configuration_issues:
                log(f"   –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(self.config_status.configuration_issues)}", "CONFIG")

class TradingModeController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, config: EnvironmentConfig):
        self.config = config
        self.test_mode = config.get_trading_mode()
        self.trading_mode_status = None
        self._update_trading_mode_status()
    
    def _update_trading_mode_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        blocking_issues = []
        can_switch_to_live = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if not self.test_mode and not self.config.config_status.api_keys_present:
            blocking_issues.append("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            can_switch_to_live = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if self.config.config_status.configuration_issues:
            blocking_issues.extend(self.config.config_status.configuration_issues)
            can_switch_to_live = False
        
        self.trading_mode_status = TradingModeStatus(
            current_mode="TEST" if self.test_mode else "LIVE",
            mode_source="–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è",
            can_switch_to_live=can_switch_to_live,
            blocking_issues=blocking_issues,
            last_mode_change=datetime.now(timezone.utc)
        )
    
    def is_test_mode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return self.test_mode
    
    def is_live_mode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return not self.test_mode
    
    def validate_live_mode_requirements(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if self.test_mode:
            return True  # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        if not self.config.config_status.api_keys_present:
            log("‚ùå –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –†–ï–ñ–ò–ú–ê: API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã", "ERROR")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if self.config.config_status.configuration_issues:
            log(f"‚ùå –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –†–ï–ñ–ò–ú–ê: {', '.join(self.config.config_status.configuration_issues)}", "ERROR")
            return False
        
        log("‚úÖ –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –†–ï–ñ–ò–ú–ê: –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã", "SUCCESS")
        return True
    
    def get_mode_display_name(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–µ–∂–∏–º–∞"""
        return "–¢–ï–°–¢–û–í–´–ô" if self.test_mode else "–†–ï–ê–õ–¨–ù–´–ô"
    
    def get_mode_emoji(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞"""
        return "üß™" if self.test_mode else "üî¥"
    
    def log_trading_mode_status(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.trading_mode_status:
            log("üìä –°–¢–ê–¢–£–° –†–ï–ñ–ò–ú–ê –¢–û–†–ì–û–í–õ–ò:", "CONFIG")
            log(f"   –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {self.get_mode_emoji()} {self.trading_mode_status.current_mode}", "CONFIG")
            log(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {self.trading_mode_status.mode_source}", "CONFIG")
            log(f"   –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤ —Ä–µ–∞–ª—å–Ω—ã–π: {'‚úÖ' if self.trading_mode_status.can_switch_to_live else '‚ùå'}", "CONFIG")
            if self.trading_mode_status.blocking_issues:
                log(f"   –ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {', '.join(self.trading_mode_status.blocking_issues)}", "CONFIG")
    
    def get_trade_operation_prefix(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        return "üß™ TEST" if self.test_mode else "üî¥ LIVE"

class SafetyValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π"""
    
    def __init__(self, config: EnvironmentConfig):
        self.config = config
    
    def validate_api_keys(self, api_key: str, api_secret: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π"""
        if not api_key or not api_secret:
            log("‚ùå –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô: –ö–ª—é—á–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã", "SAFETY")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–µ–π
        if len(api_key) < 20 or len(api_secret) < 20:
            log("‚ùå –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô: –ö–ª—é—á–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ", "SAFETY")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        import re
        if not re.match(r'^[A-Za-z0-9]+$', api_key) or not re.match(r'^[A-Za-z0-9]+$', api_secret):
            log("‚ùå –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô: –ö–ª—é—á–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã", "SAFETY")
            return False
        
        log("‚úÖ –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô: –§–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π", "SAFETY")
        return True
    
    def check_account_permissions(self, client) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if not client:
            log("‚ùå –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô: –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "SAFETY")
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            account_info = client.get_account()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é
            can_trade = account_info.get('canTrade', False)
            if not can_trade:
                log("‚ùå –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô: –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞", "SAFETY")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            account_type = account_info.get('accountType', 'UNKNOWN')
            log(f"‚úÖ –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}, —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞", "SAFETY")
            return True
            
        except Exception as e:
            log(f"‚ùå –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}", "SAFETY")
            return False
    
    def validate_minimum_balance(self, usdt_balance: float, base_balance: float, current_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        total_value = usdt_balance + (base_balance * current_price)
        min_required = self.config.min_balance_usdt
        
        if total_value < min_required:
            log(f"‚ùå –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å ${total_value:.2f} < ${min_required:.2f}", "SAFETY")
            return False
        
        log(f"‚úÖ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê: –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π ${total_value:.2f} >= ${min_required:.2f}", "SAFETY")
        return True
    
    def validate_trade_amount(self, amount: float, min_amount: float = 10.0) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if amount < min_amount:
            log(f"‚ùå –ü–†–û–í–ï–†–ö–ê –°–£–ú–ú–´ –¢–û–†–ì–û–í–õ–ò: –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ ${amount:.2f} < ${min_amount:.2f}", "SAFETY")
            return False
        
        log(f"‚úÖ –ü–†–û–í–ï–†–ö–ê –°–£–ú–ú–´ –¢–û–†–ì–û–í–õ–ò: –°—É–º–º–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è ${amount:.2f} >= ${min_amount:.2f}", "SAFETY")
        return True
    
    def check_api_connection(self, client) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        if not client:
            log("‚ùå –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø: –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "SAFETY")
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            client.ping()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
            server_time = client.get_server_time()
            local_time = int(time.time() * 1000)
            time_diff = abs(server_time["serverTime"] - local_time)
            
            if time_diff > 5000:  # 5 —Å–µ–∫—É–Ω–¥
                log(f"‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø: –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {time_diff}–º—Å", "SAFETY")
            
            log("‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø: API –¥–æ—Å—Ç—É–ø–Ω–æ", "SAFETY")
            return True
            
        except Exception as e:
            log(f"‚ùå –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}", "SAFETY")
            return False
    
    def perform_safety_checks(self, client=None, usdt_balance: float = 0, base_balance: float = 0, current_price: float = 0) -> List[str]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        log("üîí –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–û–ö –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò", "SAFETY")
        log("=" * 50, "SAFETY")
        
        issues = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        if not self.validate_api_keys(self.config.api_key or "", self.config.api_secret or ""):
            issues.append("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ API –∫–ª—é—á–∏")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API (–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)
        if client and not self.check_api_connection(client):
            issues.append("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞ (–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)
        if client and not self.check_account_permissions(client):
            issues.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã)
        if current_price > 0 and not self.validate_minimum_balance(usdt_balance, base_balance, current_price):
            issues.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if issues:
            log("‚ùå –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–í–ê–õ–ï–ù–´:", "SAFETY")
            for issue in issues:
                log(f"   - {issue}", "SAFETY")
        else:
            log("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´", "SAFETY")
        
        log("=" * 50, "SAFETY")
        return issues
    
    def can_perform_live_trading(self, client=None, usdt_balance: float = 0, base_balance: float = 0, current_price: float = 0) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.config.test_mode:
            return True  # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å
        
        issues = self.perform_safety_checks(client, usdt_balance, base_balance, current_price)
        return len(issues) == 0

# ========== –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤ ==========
class AssetSwitcher:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏ –ø–æ MA —Å–∏–≥–Ω–∞–ª–∞–º"""
    
    def __init__(self, client: Optional[Client], symbol: str, trading_mode_controller: Optional['TradingModeController'] = None):
        self.client = client
        self.symbol = symbol
        self.base_asset = symbol[:-4] if symbol.endswith("USDT") else symbol.split("USDT")[0]
        self.quote_asset = "USDT"
        self.last_switch_time = 0
        self.min_switch_interval = 10  # –º–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏
        self.trading_mode_controller = trading_mode_controller
    
    def should_hold_base(self, ma_short: float, ma_long: float) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–æ–ª–∂–Ω—ã –ª–∏ –º—ã –¥–µ—Ä–∂–∞—Ç—å –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ (–∫–æ–∏–Ω)"""
        return ma_short > ma_long
    
    def get_current_asset_preference(self, usdt_balance: float, base_balance: float, current_price: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –º—ã —Å–µ–π—á–∞—Å –¥–µ—Ä–∂–∏–º"""
        usdt_value = usdt_balance
        base_value = base_balance * current_price
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        log(f"üîç –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ê–ö–¢–ò–í–ê: USDT=${usdt_value:.2f}, {self.base_asset}=${base_value:.2f}", "DEBUG")
        
        # –°—á–∏—Ç–∞–µ–º —á—Ç–æ –¥–µ—Ä–∂–∏–º —Ç–æ—Ç –∞–∫—Ç–∏–≤, –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ–ª—å—à–µ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if base_value > usdt_value and base_value > 1.0:  # –º–∏–Ω–∏–º—É–º $1
            log(f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢: –î–µ—Ä–∂–∏–º {self.base_asset} (${base_value:.2f} > ${usdt_value:.2f})", "DEBUG")
            return self.base_asset
        else:
            log(f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢: –î–µ—Ä–∂–∏–º {self.quote_asset} (${usdt_value:.2f} >= ${base_value:.2f})", "DEBUG")
            return self.quote_asset
    
    def need_to_switch(self, current_asset: str, should_hold: str) -> bool:
        """–ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –∞–∫—Ç–∏–≤"""
        current_time = time.time()
        time_since_last = current_time - self.last_switch_time
        
        log(f"üîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø: current='{current_asset}', should='{should_hold}', time_since_last={time_since_last:.1f}s", "DEBUG")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if time_since_last < self.min_switch_interval:
            log(f"üîç –ö–£–õ–î–ê–£–ù –ê–ö–¢–ò–í–ï–ù: {time_since_last:.1f}s < {self.min_switch_interval}s", "DEBUG")
            return False
        
        assets_different = current_asset != should_hold
        log(f"üîç –ê–ö–¢–ò–í–´ –†–ê–ó–ù–´–ï: {assets_different}", "DEBUG")
        
        return assets_different
    
    def execute_switch(self, from_asset: str, to_asset: str, balance: float, current_price: float, step: float) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞"""
        try:
            if from_asset == self.base_asset and to_asset == self.quote_asset:
                # –ü—Ä–æ–¥–∞–µ–º –∫–æ–∏–Ω –∑–∞ USDT
                return self._sell_base_for_usdt(balance, step)
            elif from_asset == self.quote_asset and to_asset == self.base_asset:
                # –ü–æ–∫—É–ø–∞–µ–º –∫–æ–∏–Ω –∑–∞ USDT
                return self._buy_base_with_usdt(balance, current_price, step)
            return False
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è {from_asset} -> {to_asset}: {e}", "ERROR")
            return False
    
    def _sell_base_for_usdt(self, base_qty: float, step: float) -> bool:
        """–ü—Ä–æ–¥–∞—Ç—å –≤–µ—Å—å –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ –∑–∞ USDT"""
        if TEST_MODE:
            prefix = self.trading_mode_controller.get_trade_operation_prefix() if self.trading_mode_controller else "üß™ TEST"
            log(f"{prefix} SELL: {base_qty:.6f} {self.base_asset} -> USDT", "TEST")
            self.last_switch_time = time.time()
            return True
        
        if not self.client:
            log(f"‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API", "ERROR")
            return False
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏
        qty = round_step(base_qty * 0.999, step)  # 99.9% –¥–ª—è —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
        
        log(f"üî¢ –†–ê–°–ß–ï–¢ –ü–†–û–î–ê–ñ–ò: –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={base_qty:.6f}, –ü–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è={qty:.6f} (step={step})", "CALC")
        
        if qty <= 0:
            log(f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ: {qty:.6f}", "WARN")
            return False
        
        try:
            log(f"üì§ –û–¢–ü–†–ê–í–ö–ê –û–†–î–ï–†–ê –ù–ê –ü–†–û–î–ê–ñ–£: {qty:.6f} {self.base_asset}", "ORDER")
            order = self.client.order_market_sell(symbol=self.symbol, quantity=qty)
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ
            if 'fills' in order and order['fills']:
                total_usdt = sum(float(fill['price']) * float(fill['qty']) for fill in order['fills'])
                avg_price = total_usdt / float(order['executedQty']) if float(order['executedQty']) > 0 else 0
                log(f"‚úÖ –ü–†–û–î–ê–ñ–ê –í–´–ü–û–õ–ù–ï–ù–ê: {order['executedQty']} {self.base_asset} –∑–∞ {total_usdt:.2f} USDT (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.4f})", "TRADE")
            else:
                log(f"‚úÖ –ü–†–û–î–ê–ñ–ê –í–´–ü–û–õ–ù–ï–ù–ê: {qty:.6f} {self.base_asset} -> USDT", "TRADE")
            
            self.last_switch_time = time.time()
            return True
        except Exception as e:
            log(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–û–î–ê–ñ–ò: {e}", "ERROR")
            return False
    
    def _buy_base_with_usdt(self, usdt_amount: float, current_price: float, step: float) -> bool:
        """–ö—É–ø–∏—Ç—å –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ –∑–∞ –≤–µ—Å—å USDT"""
        if TEST_MODE:
            qty = usdt_amount / current_price
            prefix = self.trading_mode_controller.get_trade_operation_prefix() if self.trading_mode_controller else "üß™ TEST"
            log(f"{prefix} BUY: {usdt_amount:.2f} USDT -> {qty:.6f} {self.base_asset}", "TEST")
            self.last_switch_time = time.time()
            return True
        
        if not self.client:
            log(f"‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API", "ERROR")
            return False
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
        usdt_to_spend = usdt_amount * 0.999  # 99.9% –¥–ª—è —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
        qty = round_step(usdt_to_spend / current_price, step)
        
        log(f"üî¢ –†–ê–°–ß–ï–¢ –ü–û–ö–£–ü–ö–ò: USDT={usdt_amount:.2f}, –ö —Ç—Ä–∞—Ç–µ={usdt_to_spend:.2f}, –¶–µ–Ω–∞={current_price:.4f}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ={qty:.6f} (step={step})", "CALC")
        
        if qty <= 0 or usdt_to_spend < 10:  # –º–∏–Ω–∏–º—É–º $10
            log(f"‚ùå –°—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞: {usdt_to_spend:.2f} USDT (–º–∏–Ω–∏–º—É–º $10)", "WARN")
            return False
        
        try:
            log(f"üì§ –û–¢–ü–†–ê–í–ö–ê –û–†–î–ï–†–ê –ù–ê –ü–û–ö–£–ü–ö–£: {qty:.6f} {self.base_asset} –∑–∞ {usdt_to_spend:.2f} USDT", "ORDER")
            order = self.client.order_market_buy(symbol=self.symbol, quantity=qty)
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ
            if 'fills' in order and order['fills']:
                total_cost = sum(float(fill['price']) * float(fill['qty']) for fill in order['fills'])
                avg_price = total_cost / float(order['executedQty']) if float(order['executedQty']) > 0 else 0
                log(f"‚úÖ –ü–û–ö–£–ü–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê: {order['executedQty']} {self.base_asset} –∑–∞ {total_cost:.2f} USDT (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.4f})", "TRADE")
            else:
                log(f"‚úÖ –ü–û–ö–£–ü–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê: {usdt_to_spend:.2f} USDT -> {qty:.6f} {self.base_asset}", "TRADE")
            
            self.last_switch_time = time.time()
            return True
        except Exception as e:
            log(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–ö–£–ü–ö–ò: {e}", "ERROR")
            return False

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ==========
env_config = EnvironmentConfig()

# –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
env_config.log_configuration_status()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
API_KEY = env_config.api_key
API_SECRET = env_config.api_secret
SYMBOL = env_config.symbol
INTERVAL = env_config.interval
MA_SHORT = env_config.ma_short
MA_LONG = env_config.ma_long
TEST_MODE = env_config.test_mode
CHECK_INTERVAL = env_config.check_interval
STATE_PATH = env_config.state_path
MA_SPREAD_BPS = env_config.ma_spread_bps
MAX_RETRIES = env_config.max_retries
HEALTH_CHECK_INTERVAL = env_config.health_check_interval
MIN_BALANCE_USDT = env_config.min_balance_usdt

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
client: Optional[Client] = None
asset_switcher: Optional[AssetSwitcher] = None
trading_mode_controller: Optional[TradingModeController] = None
safety_validator: Optional[SafetyValidator] = None
running = False
last_action_ts = 0
last_health_check = 0
error_count = 0

bot_status = {
    "status": "idle", 
    "symbol": SYMBOL, 
    "current_asset": "USDT",  # –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –¥–µ—Ä–∂–∏–º —Å–µ–π—á–∞—Å
    "should_hold": "USDT",    # –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –¥–æ–ª–∂–Ω—ã –¥–µ—Ä–∂–∞—Ç—å –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    "test_mode": TEST_MODE,
    "last_update": None,
    "balance_usdt": 0.0,
    "balance_base": 0.0,
    "current_price": 0.0,
    "ma_short": 0.0,
    "ma_long": 0.0,
    "error_count": 0,
    "uptime": 0,
    "last_switch": None,
    "switches_count": 0
}

# ========== –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ==========
def load_state():
    global bot_status
    if os.path.exists(STATE_PATH):
        try:
            with open(STATE_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)
                bot_status.update(data)
                log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ state.json", "STATE")
        except Exception as e:
            log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}", "WARN")

def save_state():
    try:
        bot_status["last_update"] = datetime.now(timezone.utc).isoformat()
        with open(STATE_PATH, "w", encoding="utf-8") as f:
            json.dump(bot_status, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}", "WARN")

# ========== Binance –∫–ª–∏–µ–Ω—Ç ==========
def init_client():
    global client, asset_switcher, trading_mode_controller
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
    trading_mode_controller = TradingModeController(env_config)
    trading_mode_controller.log_trading_mode_status()
    
    if API_KEY and API_SECRET:
        try:
            client = Client(API_KEY, API_SECRET)
            # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
            server_time = client.get_server_time()
            local_time = int(time.time() * 1000)
            offset = server_time["serverTime"] - local_time
            if abs(offset) > 1000:
                client.timestamp_offset = offset
                log(f"–í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, offset={offset}–º—Å", "TIME")
            
            client.ping()
            asset_switcher = AssetSwitcher(client, SYMBOL, trading_mode_controller)
            
            log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
            bot_status["status"] = "connected"
            return True
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}", "ERROR")
            client = None
            asset_switcher = None
            bot_status["status"] = "connection_error"
            return False
    else:
        log("API –∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî TEST_MODE –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ true", "WARN")
        asset_switcher = AssetSwitcher(None, SYMBOL, trading_mode_controller)
        bot_status["status"] = "no_api_keys"
        return False

# ========== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–∏–º–≤–æ–ª—É –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ ==========
def get_symbol_filters(symbol: str):
    if not client:
        return 0.001, 0.01, 0.001, 10.0
    
    try:
        info = client.get_symbol_info(symbol)
        if not info:
            raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª {symbol}")
        
        lot = next(f for f in info["filters"] if f["filterType"] == "LOT_SIZE")
        pricef = next(f for f in info["filters"] if f["filterType"] == "PRICE_FILTER")
        min_notional = next((f for f in info["filters"] if f["filterType"] == "MIN_NOTIONAL"), None)
        
        step = float(lot["stepSize"])
        tick = float(pricef["tickSize"])
        min_qty = float(lot["minQty"])
        min_not = float(min_notional["minNotional"]) if min_notional else 10.0
        
        return step, tick, min_qty, min_not
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∏–º–≤–æ–ª–∞: {e}", "ERROR")
        return 0.001, 0.01, 0.001, 10.0

def round_step(qty: float, step: float) -> float:
    return math.floor(qty / step) * step

def round_tick(price: float, tick: float) -> float:
    return round(math.floor(price / tick) * tick, 8)

def retry_on_error(func, max_retries=MAX_RETRIES, delay=1):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    for attempt in range(max_retries):
        try:
            return func()
        except (BinanceAPIException, BinanceOrderException) as e:
            if "Too many requests" in str(e) or "Request rate limit" in str(e):
                wait_time = delay * (2 ** attempt)
                log(f"Rate limit, –∂–¥–µ–º {wait_time}—Å (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})", "WARN")
                time.sleep(wait_time)
            else:
                log(f"Binance –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}", "ERROR")
                if attempt < max_retries - 1:
                    time.sleep(delay)
        except Exception as e:
            log(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}", "ERROR")
            if attempt < max_retries - 1:
                time.sleep(delay)
    
    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")

# ========== –î–∞–Ω–Ω—ã–µ –∏ MA ==========
BINANCE_INTERVALS = {
    "1m": Client.KLINE_INTERVAL_1MINUTE,
    "3m": Client.KLINE_INTERVAL_3MINUTE,
    "5m": Client.KLINE_INTERVAL_5MINUTE,
    "15m": Client.KLINE_INTERVAL_15MINUTE,
    "30m": Client.KLINE_INTERVAL_30MINUTE,
    "1h": Client.KLINE_INTERVAL_1HOUR,
    "4h": Client.KLINE_INTERVAL_4HOUR,
}

def get_closes(symbol: str, interval: str, limit: int = 200):
    if not client:
        import random
        base_price = 600.0 if symbol == "BNBUSDT" else 100.0
        return [base_price + random.uniform(-5, 5) for _ in range(limit)]
    
    def _get_klines():
        inter = BINANCE_INTERVALS.get(interval, Client.KLINE_INTERVAL_5MINUTE)
        klines = client.get_klines(symbol=symbol, interval=inter, limit=limit)
        return [float(k[4]) for k in klines]
    
    return retry_on_error(_get_klines)

def ma(arr, period):
    if len(arr) < period:
        return None
    return sum(arr[-period:]) / period

# ========== –ë–∞–ª–∞–Ω—Å—ã ==========
def get_balances() -> Tuple[float, float]:
    if not client:
        return 1000.0, 0.0
    
    def _get_balances():
        base = SYMBOL[:-4] if SYMBOL.endswith("USDT") else SYMBOL.split("USDT")[0]
        usdt = float(client.get_asset_balance("USDT")["free"])
        base_bal = float(client.get_asset_balance(base)["free"])
        return usdt, base_bal
    
    return retry_on_error(_get_balances)

# ========== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã ==========
def health_check():
    global last_health_check, error_count
    current_time = time.time()
    
    if current_time - last_health_check > HEALTH_CHECK_INTERVAL:
        try:
            if client:
                client.ping()
                usdt_bal, base_bal = get_balances()
                bot_status.update({
                    "balance_usdt": usdt_bal,
                    "balance_base": base_bal,
                    "error_count": error_count
                })
                
                if error_count > 0:
                    error_count = max(0, error_count - 1)
                    
            last_health_check = current_time
            log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω–∞", "HEALTH")
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}", "ERROR")
            error_count += 1

# ========== –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª ==========
def trading_loop():
    global running, last_action_ts, bot_status, error_count
    
    start_time = time.time()
    log(f"–°—Ç–∞—Ä—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è {SYMBOL} (TEST_MODE={TEST_MODE})", "START")
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ running = True
    if not running:
        log("‚ö†Ô∏è running=False, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ True", "WARN")
        running = True
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å–∏–º–≤–æ–ª–∞
    step, tick, min_qty, min_notional = get_symbol_filters(SYMBOL)
    load_state()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º asset_switcher –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    global asset_switcher
    if asset_switcher is None:
        log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AssetSwitcher...", "INIT")
        asset_switcher = AssetSwitcher(client, SYMBOL)
    
    cycle_count = 0
    log(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ (running={running})", "LOOP")
    
    while running:
        try:
            cycle_count += 1
            log(f"üîÑ –¶–ò–ö–õ #{cycle_count} ==========================================", "CYCLE")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            bot_status["uptime"] = int(time.time() - start_time)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
            health_check()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            log("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...", "DATA")
            prices = get_closes(SYMBOL, INTERVAL, limit=max(MA_LONG * 3, 100))
            price = prices[-1]
            usdt_bal, base_bal = get_balances()
            
            # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –±–∞–ª–∞–Ω—Å–æ–≤
            base_value = base_bal * price
            total_value = usdt_bal + base_value
            log(f"üí∞ –ë–ê–õ–ê–ù–°–´: USDT={usdt_bal:.2f} | {asset_switcher.base_asset}={base_bal:.6f} (${base_value:.2f}) | –í–°–ï–ì–û=${total_value:.2f}", "BALANCE")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            bot_status.update({
                "current_price": price,
                "balance_usdt": usdt_bal,
                "balance_base": base_bal
            })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if total_value < MIN_BALANCE_USDT:
                log(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: ${total_value:.2f} < ${MIN_BALANCE_USDT}", "WARN")
                time.sleep(CHECK_INTERVAL)
                continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MA
            m1 = ma(prices, MA_SHORT)
            m2 = ma(prices, MA_LONG)
            
            if m1 is not None and m2 is not None:
                # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ MA
                ma_diff = m1 - m2
                ma_diff_pct = (ma_diff / price) * 100
                spread_bps = abs(ma_diff / price) * 10000.0
                
                log(f"üìà MA –ê–ù–ê–õ–ò–ó: MA7={m1:.4f} | MA25={m2:.4f} | –†–∞–∑–Ω–∏—Ü–∞={ma_diff:+.4f} ({ma_diff_pct:+.3f}%) | –°–ø—Ä–µ–¥={spread_bps:.1f}–±.–ø.", "MA")
                
                bot_status.update({
                    "ma_short": m1,
                    "ma_long": m2
                })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ asset_switcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if asset_switcher is None:
                    log("‚ùå AssetSwitcher –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "ERROR")
                    time.sleep(CHECK_INTERVAL)
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –¥–æ–ª–∂–Ω—ã –¥–µ—Ä–∂–∞—Ç—å
                should_hold_base = asset_switcher.should_hold_base(m1, m2)
                should_hold_asset = asset_switcher.base_asset if should_hold_base else asset_switcher.quote_asset
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –¥–µ—Ä–∂–∏–º —Å–µ–π—á–∞—Å
                current_asset = asset_switcher.get_current_asset_preference(usdt_bal, base_bal, price)
                
                # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                trend_direction = "–í–û–°–•–û–î–Ø–©–ò–ô üìà" if m1 > m2 else "–ù–ò–°–•–û–î–Ø–©–ò–ô üìâ"
                strategy_reason = f"MA7 {'>' if m1 > m2 else '<'} MA25"
                log(f"üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø: {trend_direction} ({strategy_reason}) ‚Üí –î–æ–ª–∂–Ω—ã –¥–µ—Ä–∂–∞—Ç—å {should_hold_asset}", "STRATEGY")
                log(f"üè¶ –¢–ï–ö–£–©–ò–ô –ê–ö–¢–ò–í: {current_asset} (–ø–æ –±–∞–ª–∞–Ω—Å–∞–º: USDT=${usdt_bal:.2f}, {asset_switcher.base_asset}=${base_value:.2f})", "CURRENT")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                bot_status.update({
                    "current_asset": current_asset,
                    "should_hold": should_hold_asset
                })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä —à—É–º–∞
                if spread_bps < MA_SPREAD_BPS:
                    log(f"üîá –§–ò–õ–¨–¢–† –®–£–ú–ê: –°–ø—Ä–µ–¥ {spread_bps:.1f}–±.–ø. < {MA_SPREAD_BPS}–±.–ø. - —Å–∏–≥–Ω–∞–ª —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π", "FILTER")
                    time.sleep(CHECK_INTERVAL)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
                time_since_last_switch = time.time() - asset_switcher.last_switch_time
                if time_since_last_switch < asset_switcher.min_switch_interval:
                    remaining_cooldown = asset_switcher.min_switch_interval - time_since_last_switch
                    log(f"‚è∞ –ö–£–õ–î–ê–£–ù: –û—Å—Ç–∞–ª–æ—Å—å {remaining_cooldown:.1f}—Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è", "COOLDOWN")
                    time.sleep(CHECK_INTERVAL)
                    continue
                
                # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                status_emoji = "‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–û" if current_asset == should_hold_asset else "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï"
                log(f"üìä –°–¢–ê–¢–£–°: –¶–µ–Ω–∞={price:.4f} | –î–µ—Ä–∂–∏–º={current_asset} | –ù—É–∂–Ω–æ={should_hold_asset} | {status_emoji}", "STATUS")
                
                # –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                log(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: current_asset='{current_asset}', should_hold_asset='{should_hold_asset}'", "DEBUG")
                log(f"üîç –ë–ê–õ–ê–ù–°–´: USDT={usdt_bal:.2f}, {asset_switcher.base_asset}={base_bal:.6f} (${base_value:.2f})", "DEBUG")
                log(f"üîç –ö–£–õ–î–ê–£–ù: –ü—Ä–æ—à–ª–æ {time_since_last_switch:.1f}—Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (–º–∏–Ω: {asset_switcher.min_switch_interval}—Å–µ–∫)", "DEBUG")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –∞–∫—Ç–∏–≤
                need_switch = asset_switcher.need_to_switch(current_asset, should_hold_asset)
                log(f"üîç –†–ï–®–ï–ù–ò–ï: need_to_switch = {need_switch}", "DEBUG")
                
                if need_switch:
                    log(f"üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¢–†–ï–ë–£–ï–¢–°–Ø: {current_asset} ‚Üí {should_hold_asset}", "SWITCH")
                    
                    # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
                    if current_asset == asset_switcher.base_asset:
                        # –ü—Ä–æ–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤
                        log(f"üìâ –ü–†–û–î–ê–ñ–ê: {base_bal:.6f} {asset_switcher.base_asset} ‚Üí USDT –ø–æ —Ü–µ–Ω–µ {price:.4f}", "TRADE_PLAN")
                        expected_usdt = base_bal * price * 0.999  # —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
                        log(f"üíµ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ~{expected_usdt:.2f} USDT (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ 0.1%)", "TRADE_PLAN")
                        
                        success = asset_switcher.execute_switch(
                            current_asset, should_hold_asset, base_bal, price, step
                        )
                    else:
                        # –ü–æ–∫—É–ø–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤
                        log(f"üìà –ü–û–ö–£–ü–ö–ê: {usdt_bal:.2f} USDT ‚Üí {asset_switcher.base_asset} –ø–æ —Ü–µ–Ω–µ {price:.4f}", "TRADE_PLAN")
                        expected_qty = (usdt_bal * 0.999) / price  # —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
                        log(f"ü™ô –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ~{expected_qty:.6f} {asset_switcher.base_asset} (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ 0.1%)", "TRADE_PLAN")
                        
                        success = asset_switcher.execute_switch(
                            current_asset, should_hold_asset, usdt_bal, price, step
                        )
                    
                    if success:
                        bot_status["switches_count"] = bot_status.get("switches_count", 0) + 1
                        bot_status["last_switch"] = datetime.now(timezone.utc).isoformat()
                        last_action_ts = time.time()
                        log(f"‚úÖ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–û –£–°–ü–ï–®–ù–û! –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {bot_status['switches_count']}", "SUCCESS")
                        
                        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ
                        time.sleep(2)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                        new_usdt_bal, new_base_bal = get_balances()
                        new_base_value = new_base_bal * price
                        new_total = new_usdt_bal + new_base_value
                        log(f"üí∞ –ù–û–í–´–ï –ë–ê–õ–ê–ù–°–´: USDT={new_usdt_bal:.2f} | {asset_switcher.base_asset}={new_base_bal:.6f} (${new_base_value:.2f}) | –í–°–ï–ì–û=${new_total:.2f}", "RESULT")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –Ω–æ–≤—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏
                        bot_status.update({
                            "balance_usdt": new_usdt_bal,
                            "balance_base": new_base_bal
                        })
                    else:
                        log(f"‚ùå –û–®–ò–ë–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø!", "ERROR")
                        error_count += 1
                else:
                    log(f"‚úÖ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø - –∞–∫—Ç–∏–≤—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", "OK")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            bot_status["status"] = "running"
            save_state()
            
            log(f"üò¥ –û–ñ–ò–î–ê–ù–ò–ï {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...", "SLEEP")
            time.sleep(CHECK_INTERVAL)
            
        except (BinanceAPIException, BinanceOrderException) as e:
            emsg = str(e)
            if "Too many requests" in emsg or "Request rate limit" in emsg:
                log(f"Rate limit: {e} ‚Äî —Å–ø–ª—é 5 —Å–µ–∫", "WARN")
                time.sleep(5)
            else:
                log(f"Binance –æ—à–∏–±–∫–∞: {e}", "ERROR")
                error_count += 1
                time.sleep(2)
        except Exception as e:
            log(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
            error_count += 1
            bot_status["status"] = f"error: {str(e)}"
            save_state()
            time.sleep(2)
    
    log("–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "SHUTDOWN")

# ========== Flask –º–∞—Ä—à—Ä—É—Ç—ã ==========
@app.route("/")
def root():
    return jsonify({
        "ok": True, 
        "symbol": SYMBOL, 
        "status": bot_status.get("status", "idle"), 
        "current_asset": bot_status.get("current_asset", "USDT"),
        "should_hold": bot_status.get("should_hold", "USDT"),
        "test_mode": TEST_MODE,
        "uptime": bot_status.get("uptime", 0)
    })

@app.route("/health")
def health():
    try:
        if client:
            client.ping()
            return jsonify({"ok": True, "status": "healthy"})
        else:
            return jsonify({"ok": True, "status": "test_mode"})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500

@app.route("/start")
def start():
    global running, bot_status
    if running:
        return jsonify({"ok": True, "message": "—É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"})
    
    if API_KEY and API_SECRET:
        init_client()
    
    running = True
    bot_status["status"] = "running"
    save_state()
    
    t = threading.Thread(target=trading_loop, daemon=True)
    t.start()
    log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", "START")
    return jsonify({"ok": True, "mode": "TEST" if TEST_MODE else "LIVE"})

@app.route("/stop")
def stop():
    global running, bot_status
    running = False
    bot_status["status"] = "stopped"
    save_state()
    log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "STOP")
    return jsonify({"ok": True})

@app.route("/status")
def status():
    return jsonify({
        "ok": True,
        "symbol": SYMBOL,
        "mode": "TEST" if TEST_MODE else "LIVE",
        "status": bot_status.get("status", "idle"),
        "current_asset": bot_status.get("current_asset", "USDT"),
        "should_hold": bot_status.get("should_hold", "USDT"),
        "current_price": bot_status.get("current_price", 0.0),
        "balance_usdt": bot_status.get("balance_usdt", 0.0),
        "balance_base": bot_status.get("balance_base", 0.0),
        "ma_short": bot_status.get("ma_short", 0.0),
        "ma_long": bot_status.get("ma_long", 0.0),
        "error_count": bot_status.get("error_count", 0),
        "uptime": bot_status.get("uptime", 0),
        "switches_count": bot_status.get("switches_count", 0),
        "last_switch": bot_status.get("last_switch"),
        "last_update": bot_status.get("last_update")
    })

@app.route("/config")
def config():
    return jsonify({
        "symbol": SYMBOL,
        "interval": INTERVAL,
        "ma_short": MA_SHORT,
        "ma_long": MA_LONG,
        "test_mode": TEST_MODE,
        "check_interval": CHECK_INTERVAL,
        "ma_spread_bps": MA_SPREAD_BPS,
        "min_balance_usdt": MIN_BALANCE_USDT
    })

@app.route("/config-status")
def config_status():
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_sources = {}
    critical_vars = ["TEST_MODE", "BINANCE_API_KEY", "BINANCE_API_SECRET", "SYMBOL"]
    
    for var in critical_vars:
        system_value = os.environ.get(var)
        dotenv_value = os.getenv(var)
        
        if system_value is not None:
            source = "—Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            value = system_value
        elif dotenv_value is not None:
            source = ".env —Ñ–∞–π–ª"
            value = dotenv_value
        else:
            source = "–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            value = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        # –ú–∞—Å–∫–∏—Ä—É–µ–º API –∫–ª—é—á–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if "API" in var and value != "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ":
            display_value = f"{value[:8]}...{value[-4:]}" if len(value) > 12 else "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else:
            display_value = value
            
        env_sources[var] = {
            "value": display_value,
            "source": source,
            "is_set": value != "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        }
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_issues = []
    if not env_config.config_status.api_keys_present:
        config_issues.append("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    if env_config.config_status.test_mode and env_sources["TEST_MODE"]["source"] == "–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é":
        config_issues.append("TEST_MODE –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    return jsonify({
        "ok": True,
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "trading_mode": {
            "current": "TEST" if TEST_MODE else "LIVE",
            "test_mode_value": TEST_MODE,
            "source": env_sources["TEST_MODE"]["source"],
            "warning": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º" if TEST_MODE else "–í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞!"
        },
        "environment_variables": env_sources,
        "configuration_status": {
            "api_keys_present": env_config.config_status.api_keys_present,
            "safety_checks_passed": env_config.config_status.safety_checks_passed,
            "issues": config_issues
        },
        "file_status": {
            "env_file_path": os.path.join(os.path.dirname(os.path.abspath(__file__)), '.env'),
            "env_file_exists": os.path.exists(os.path.join(os.path.dirname(os.path.abspath(__file__)), '.env'))
        },
        "recommendations": [
            "–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TEST_MODE=false –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render",
            "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ API –∫–ª—é—á–µ–π –≤ Binance (—Ç–æ–ª—å–∫–æ —Å–ø–æ—Ç-—Ç–æ—Ä–≥–æ–≤–ª—è)",
            "–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞"
        ] if TEST_MODE else [
            "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ - –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            "–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –±–∞–ª–∞–Ω—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏",
            "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        ]
    })

# ========== –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –¥–ª—è –¥–µ–ø–ª–æ—è ==========
if API_KEY and API_SECRET:
    try:
        if not running:
            init_client()
            running = True
            bot_thread = threading.Thread(target=trading_loop, daemon=True)
            bot_thread.start()
            mode = "TEST" if TEST_MODE else "LIVE"
            log(f"üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ä–µ–∂–∏–º–µ {mode}", "STARTUP")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}", "ERROR")
        running = False
else:
    log("‚ö†Ô∏è –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω: –Ω–µ—Ç API –∫–ª—é—á–µ–π", "WARNING")

# ========== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ==========
if __name__ == "__main__":
    if API_KEY and API_SECRET:
        init_client()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        if not running:
            running = True
            bot_thread = threading.Thread(target=trading_loop, daemon=True)
            bot_thread.start()
            mode = "TEST" if TEST_MODE else "LIVE"
            log(f"üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ {mode}", "STARTUP")
    
    port = int(os.getenv("PORT", "5000"))
    app.run(host="0.0.0.0", port=port)
    